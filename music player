#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable:4996)
typedef char element[100];
typedef struct DListNode {
	element data;
	struct DListNode *llink;
	struct DListNode *rlink;
}DListNode;
void init(DListNode *head) {
	head->llink = head;
	head->rlink = head;
}
void dinsert(DListNode *before, element data) {
	DListNode *new_node = (DListNode *)malloc(sizeof(DListNode));
	strcpy(new_node->data, data);
	new_node->llink = before;
	new_node->rlink = before->rlink;
	before->rlink->llink = new_node;
	before->rlink = new_node;
}
void ddelete(DListNode *head, DListNode *removed) {
	if (removed == head)
		return;
	removed->llink->rlink = removed->rlink;
	removed->rlink->llink = removed->llink;
	free(removed);
}
void print_dlist(DListNode *head, DListNode *current) {
	DListNode *p;
	for (p = head->rlink; p != head; p = p->rlink) {
		if (current == p)
			printf("<-|#%s#|-> ", p->data);
		else
			printf("<-|%s|-> ", p->data);
	}
	printf("\n");
}
int main(void) {
	char ch;
	DListNode *current = NULL;
	DListNode *head = (DListNode *)malloc(sizeof(DListNode));//dummy node 특별한 값을 가지고 있지x 
	init(head);

	dinsert(head, "Mamamia");
	dinsert(head, "Dancing Queen");
	dinsert(head, "Fernande");

	current = head->rlink;
	print_dlist(head,current);
	
	do {
		printf("\n명령어를 입력하시요(<,>,q): ");
		ch = getchar();
		if (ch == '<')
		{
			current = current->llink;
			if (current == head)
				current = current->llink;
		}
		else if (ch == '>')
		{
			current = current->rlink;
			if (current == head)
				current = current->rlink;
		}
		print_dlist(head,current);
		getchar();
	} while (ch != 'q');

}
