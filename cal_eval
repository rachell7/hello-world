#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable:4996)
typedef struct{
	int coef;
	int poly;
}element;
typedef struct ListNodeType {
	element data;
	struct ListNodeType *link;
}ListNode;
ListNode* insert_last(ListNode *head, element value) {
	ListNode *new_node = (ListNode *)malloc(sizeof(ListNode));
	ListNode *p;
	new_node->data = value;
	new_node->link = NULL;
	if (head == NULL) {
		head = new_node;
	}
	else {
		p = head;
		while (p->link != NULL) {
			p = p->link;
		}
		p->link = new_node;
	}
	return head;
}
element *create_element(int coef, int poly) {
	element* new_element = (element*)malloc(sizeof(element));
	new_element->coef = coef;
	new_element->poly = poly;
	return new_element;
}
void print_list(ListNode *head) {
	ListNode *p;
	for (p = head; p->link != NULL; p = p->link) {
		printf("%dx^%d +", p->data.coef,p->data.poly);
	}
	printf("%dx^%d\n", p->data.coef,p->data.poly);
}

ListNode* split1(ListNode *c, ListNode *a) {
	ListNode *p;
	int i = 0;
	for (p = c; p != NULL; p = p->link) {
		if (i % 2 == 0) {
			a = insert_last(a, p->data);
		}
		i++;
	}
	return a;
}
ListNode * split2(ListNode *c, ListNode *a) {
	ListNode *p;
	int i = 0;
	for (p = c; p != NULL; p = p->link) {
		if (i % 2 != 0) {
			a = insert_last(a, p->data);
		}
		i++;
	}
	return a;
}
void split(ListNode *c, ListNode *a, ListNode *b) { 
	ListNode *p;
	int i = 0;
	for (p = c; p != NULL; p = p->link) {
		if (i % 2 == 0) {
			a = insert_last(a, p->data);
		}
		else {
			b = insert_last(b, p->data);
		}
		i++;
	}// a와 b가 split함수를 나와서 main함수에서 쓰였을 때는 변화가 적용되지 않지?
	print_list(a);
	print_list(b);
}
int poly_eval(ListNode *head, int x) {
	ListNode *p;
	int i;
	int sum,total=0;
	for (p = head; p != NULL; p = p->link) {
		sum = p->data.coef;
		for (i = 0; i < p->data.poly; i++) {
			sum *= x;
		}
		total += sum;
	}
	return total;
}
int main(void) {
	int i;
	ListNode *head1=NULL;
	ListNode *head2=NULL;
	ListNode *head3=NULL;

	head1=insert_last(head1,*create_element(1, 3));
	head1=insert_last(head1, *create_element(2, 1));
	head1=insert_last(head1, *create_element(6, 0));
	print_list(head1);

	printf("%d",poly_eval(head1, 2));
}
